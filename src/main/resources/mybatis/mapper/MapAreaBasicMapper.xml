<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zltel.broadcast.area_manage.dao.MapAreaBasicMapper">
  <resultMap id="BaseResultMap" type="com.zltel.broadcast.area_manage.bean.MapAreaBasic">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="type_id" jdbcType="INTEGER" property="typeId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.zltel.broadcast.area_manage.bean.MapAreaBasic">
    <result column="describes" jdbcType="LONGVARCHAR" property="describes" />
  </resultMap>
  <sql id="Base_Column_List">
    id, type_id, name, create_time
  </sql>
  <sql id="Blob_Column_List">
    describes
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from map_area_basic
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from map_area_basic
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zltel.broadcast.area_manage.bean.MapAreaBasic">
    insert into map_area_basic (id, type_id, name, 
      create_time, describes)
    values (#{id,jdbcType=INTEGER}, #{typeId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{describes,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zltel.broadcast.area_manage.bean.MapAreaBasic" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    insert into map_area_basic
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="typeId != null">
        type_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="describes != null">
        describes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="describes != null">
        #{describes,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zltel.broadcast.area_manage.bean.MapAreaBasic">
    update map_area_basic
    <set>
      <if test="typeId != null">
        type_id = #{typeId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="describes != null">
        describes = #{describes,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zltel.broadcast.area_manage.bean.MapAreaBasic">
    update map_area_basic
    set type_id = #{typeId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      describes = #{describes,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zltel.broadcast.area_manage.bean.MapAreaBasic">
    update map_area_basic
    set type_id = #{typeId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="queryMapAreaBasics" parameterType="java.util.HashMap" resultType="java.util.HashMap">
  	SELECT
	  mab.id id,
	  mab.type_id typeId,
	  mab.name name,
	  mab.describes describes,
	  mab.create_time createTime,
	  mat.name name,
	  mat.icon_path iconPath
	FROM
	  map_area_basic mab 
	  INNER JOIN map_area_type mat ON mab.type_id = mat.id
	where
	  1 = 1
	  <if test="areaBasicId != null"> and
       	mab.id = #{areaBasicId}
      </if>
  </select>
</mapper>