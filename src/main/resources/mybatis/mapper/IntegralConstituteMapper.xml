<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zltel.broadcast.um.dao.IntegralConstituteMapper">
  <resultMap id="BaseResultMap" type="com.zltel.broadcast.um.bean.IntegralConstitute">
    <id column="ic_id" jdbcType="INTEGER" property="icId" />
    <result column="org_id" jdbcType="INTEGER" property="orgId" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="integral" jdbcType="DECIMAL" property="integral" />
    <result column="describes" jdbcType="VARCHAR" property="describes" />
    <result column="parent_ic_id" jdbcType="INTEGER" property="parentIcId" />
    <result column="is_inner_integral" jdbcType="INTEGER" property="isInnerIntegral" />
  </resultMap>
  <sql id="Base_Column_List">
    ic_id, org_id, type, integral, describes, parent_ic_id, is_inner_integral
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from integral_constitute
    where ic_id = #{icId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from integral_constitute
    where ic_id = #{icId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zltel.broadcast.um.bean.IntegralConstitute">
    insert into integral_constitute (ic_id, org_id, type, integral, 
      describes, parent_ic_id, is_inner_integral)
    values (#{icId,jdbcType=INTEGER}, #{orgId,jdbcType=INTEGER}, #{type,jdbcType=VARCHAR}, #{integral,jdbcType=DECIMAL}, 
      #{describes,jdbcType=VARCHAR}, #{parentIcId,jdbcType=INTEGER}, #{isInnerIntegral,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.zltel.broadcast.um.bean.IntegralConstitute">
    insert into integral_constitute
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="icId != null">
        ic_id,
      </if>
      <if test="orgId != null">
        org_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="integral != null">
        integral,
      </if>
      <if test="describes != null">
        describes,
      </if>
      <if test="parentIcId != null">
        parent_ic_id,
      </if>
      <if test="isInnerIntegral != null">
        is_inner_integral,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="icId != null">
        #{icId,jdbcType=INTEGER},
      </if>
      <if test="orgId != null">
        #{orgId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="integral != null">
        #{integral,jdbcType=DECIMAL},
      </if>
      <if test="describes != null">
        #{describes,jdbcType=VARCHAR},
      </if>
      <if test="parentIcId != null">
        #{parentIcId,jdbcType=INTEGER},
      </if>
      <if test="isInnerIntegral != null">
        #{isInnerIntegral,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zltel.broadcast.um.bean.IntegralConstitute">
    update integral_constitute
    <set>
      <if test="orgId != null">
        type = #{orgId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="integral != null">
        integral = #{integral,jdbcType=DECIMAL},
      </if>
      <if test="describes != null">
        describes = #{describes,jdbcType=VARCHAR},
      </if>
      <if test="parentIcId != null">
        parent_ic_id = #{parentIcId,jdbcType=INTEGER},
      </if>
      <if test="isInnerIntegral != null">
        is_inner_integral = #{isInnerIntegral,jdbcType=INTEGER},
      </if>
    </set>
    where ic_id = #{icId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zltel.broadcast.um.bean.IntegralConstitute">
    update integral_constitute
    set org_id = #{orgId,jdbcType=INTEGER},
      type = #{type,jdbcType=VARCHAR},
      integral = #{integral,jdbcType=DECIMAL},
      describes = #{describes,jdbcType=VARCHAR},
      parent_ic_id = #{parentIcId,jdbcType=INTEGER},
      is_inner_integral = #{isInnerIntegral,jdbcType=INTEGER}
    where ic_id = #{icId,jdbcType=INTEGER}
  </update>
  
  <select id="queryOrgIntegralConstitute" parameterType="java.util.HashMap" resultType="java.util.HashMap">
  	select
	  ic.ic_id icId,
	  ic.org_id orgId,
	  _oi.org_info_name orgInfoName,
	  ic.type type,
	  ic.integral integral,
	  ic.describes describes,
	  ic.parent_ic_id parentIcId,
	  ic.is_inner_integral isInnerIntegral
	from
	  integral_constitute ic 
	  inner join organization_information _oi on ic.org_id = _oi.org_info_id
	where
	  1 = 1
	  <if test="orgId != null and orgId != ''"> and
       	ic.org_id = #{orgId}
      </if>
      <if test="parentIcId != null and parentIcId != ''"> and
       	ic.parent_ic_id = #{parentIcId}
      </if>
      <if test="icId != null and icId != ''"> and
       	ic.ic_id = #{icId}
      </if>
      <if test="type != null and type != ''"> and
       	ic.type = #{type}
      </if>
      <if test="isInnerIntegral != null and isInnerIntegral != ''"> and
       	ic.is_inner_integral = #{isInnerIntegral}
      </if>
  </select>
  
  <select id="queryOrgInfoForIc" parameterType="java.util.HashMap" resultType="java.util.HashMap">
  	select
	  distinct ic.org_id orgId,
	  _oi.org_info_name orgInfoName
	from
	  integral_constitute ic 
	  inner join organization_information _oi on ic.org_id = _oi.org_info_id
	where
	  1 = 1
	  <if test="orgInfoName != null and orgInfoName != ''"> and
          _oi.org_info_name like CONCAT('%',#{orgInfoName},'%')
      </if>
      <if test="orgInfoId != null and orgInfoId != ''"> and
          _oi.org_info_id = #{orgInfoId}
      </if>
  </select>
  
  <select id="queryPartyUserInfoAndIcInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
  	select
	  distinct _or.org_rlt_user_id orgRltUserId,
	  bui.name name,
	  bui.id_card idCard
	from
	  organization_relation _or 
	  inner join integral_constitute ic on _or.org_rlt_info_id = ic.org_id 
	  inner join party_user_info pui on _or.org_rlt_user_id = pui.party_user_id 
	  inner join base_user_info bui on _or.org_rlt_user_id = bui.base_user_id
	where
	  1 = 1
	  <if test="orgId != null and orgId != ''"> and
       	ic.org_id = #{orgId}
      </if>
  </select>
  
  <select id="queryInsertedIcId" resultType="java.lang.Integer">
		select LAST_INSERT_ID()
  </select>
  
  <delete id="deleteByOrgId" parameterType="java.lang.Integer">
    delete from integral_constitute
    where org_id = #{orgId,jdbcType=INTEGER}
  </delete>
</mapper>