<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zltel.broadcast.um.dao.OffLinePayRecordMapper">
  <resultMap id="BaseResultMap" type="com.zltel.broadcast.um.bean.OffLinePayRecord">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="org_id" jdbcType="INTEGER" property="orgId" />
    <result column="pay_date" jdbcType="TIMESTAMP" property="payDate" />
    <result column="pay_monthly" jdbcType="TIMESTAMP" property="payMonthly" />
    <result column="month_num" jdbcType="INTEGER" property="monthNum" />
    <result column="pay_money" jdbcType="BIGINT" property="payMoney" />
    <result column="this_time" jdbcType="TIMESTAMP" property="thisTime" />
    <result column="is_pass" jdbcType="INTEGER" property="isPass" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, org_id, pay_date, pay_monthly, month_num, pay_money, this_time, is_pass
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from off_line_pay_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from off_line_pay_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zltel.broadcast.um.bean.OffLinePayRecord">
    insert into off_line_pay_record (id, user_id, org_id, 
      pay_date, pay_monthly, month_num, 
      pay_money, this_time, is_pass
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{orgId,jdbcType=INTEGER}, 
      #{payDate,jdbcType=TIMESTAMP}, #{payMonthly,jdbcType=TIMESTAMP}, #{monthNum,jdbcType=INTEGER}, 
      #{payMoney,jdbcType=BIGINT}, #{thisTime,jdbcType=TIMESTAMP}, #{isPass,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zltel.broadcast.um.bean.OffLinePayRecord">
    insert into off_line_pay_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="orgId != null">
        org_id,
      </if>
      <if test="payDate != null">
        pay_date,
      </if>
      <if test="payMonthly != null">
        pay_monthly,
      </if>
      <if test="monthNum != null">
        month_num,
      </if>
      <if test="payMoney != null">
        pay_money,
      </if>
      <if test="thisTime != null">
        this_time,
      </if>
      <if test="isPass != null">
        is_pass,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="orgId != null">
        #{orgId,jdbcType=INTEGER},
      </if>
      <if test="payDate != null">
        #{payDate,jdbcType=TIMESTAMP},
      </if>
      <if test="payMonthly != null">
        #{payMonthly,jdbcType=TIMESTAMP},
      </if>
      <if test="monthNum != null">
        #{monthNum,jdbcType=INTEGER},
      </if>
      <if test="payMoney != null">
        #{payMoney,jdbcType=BIGINT},
      </if>
      <if test="thisTime != null">
        #{thisTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isPass != null">
        #{isPass,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zltel.broadcast.um.bean.OffLinePayRecord">
    update off_line_pay_record
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="orgId != null">
        org_id = #{orgId,jdbcType=INTEGER},
      </if>
      <if test="payDate != null">
        pay_date = #{payDate,jdbcType=TIMESTAMP},
      </if>
      <if test="payMonthly != null">
        pay_monthly = #{payMonthly,jdbcType=TIMESTAMP},
      </if>
      <if test="monthNum != null">
        month_num = #{monthNum,jdbcType=INTEGER},
      </if>
      <if test="payMoney != null">
        pay_money = #{payMoney,jdbcType=BIGINT},
      </if>
      <if test="thisTime != null">
        this_time = #{thisTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isPass != null">
        is_pass = #{isPass,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zltel.broadcast.um.bean.OffLinePayRecord">
    update off_line_pay_record
    set user_id = #{userId,jdbcType=INTEGER},
      org_id = #{orgId,jdbcType=INTEGER},
      pay_date = #{payDate,jdbcType=TIMESTAMP},
      pay_monthly = #{payMonthly,jdbcType=TIMESTAMP},
      month_num = #{monthNum,jdbcType=INTEGER},
      pay_money = #{payMoney,jdbcType=BIGINT},
      this_time = #{thisTime,jdbcType=TIMESTAMP},
      is_pass = #{isPass,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="queryOffLinePayRecord" parameterType="java.util.HashMap" resultType="java.util.HashMap">
  	select
	  bui.name name,
	  oi.org_info_id orgInfoId,
	  oi.org_info_name orgInfoName,
	  olpr.pay_date payDate,
	  olpr.pay_monthly payMonthly,
	  olpr.month_num monthNum,
	  olpr.pay_money payMoney,
	  olpr.is_pass isPass
	from
	  off_line_pay_record olpr  
	  left join base_user_info bui on bui.base_user_id = olpr.user_id
	  left join organization_information oi on olpr.org_id = oi.org_info_id 
	where
	  1 = 1
	  <if test="userId != null and userId != ''"> and 
		  olpr.user_id = #{userId}
	  </if>
  </select>
</mapper>